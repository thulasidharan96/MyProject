#include <WiFi.h>
#include <ThingSpeak.h>
#include "DHTesp.h"

#define DO_PIN 13

char ssid[] = "Wokwi-GUEST";
char pass[] = "";
WiFiClient client;
unsigned long myChannelNumber =  2072862;
const char * myWriteAPIKey = "FUPFO65KYKXFYZTJ";
DHTesp dhtSensor;
TempAndHumidity data;
const int DHT_PIN = 12;
const int TRIG_PIN = 2;
const int ECHO_PIN = 4;
long duration, distance;
int statusCode;

void setup() {
Serial.begin(9600);
pinMode(32, INPUT); 
pinMode(34, INPUT);
WiFi.mode(WIFI_STA);
ThingSpeak.begin(client);
dhtSensor.setup(DHT_PIN, DHTesp::DHT22);
pinMode(TRIG_PIN, OUTPUT);
pinMode(ECHO_PIN, INPUT);
}

void loop() {
  pinMode(DO_PIN, INPUT);
connectToCloud();
aqi();
computeData();
writeData();    
}

void connectToCloud(){
if(WiFi.status() != WL_CONNECTED) {
Serial.print("Attempting to connect");
while(WiFi.status() != WL_CONNECTED) {
WiFi.begin(ssid, pass);
for(int i=0;i<5;i++) {
Serial.print(".");
delay(5000);
}
}
Serial.println("\nConnected.");
}
}

void aqi(){
  int aqi=analogRead(34);
  Serial.println("AQI INDEX=" + String(aqi));
}

void computeData(){
distance = getDistanceInCentimeters();
data = dhtSensor.getTempAndHumidity();
Serial.println("Humi: " + String(data.humidity));
Serial.println("Temp: " + String(data.temperature));
Serial.println("Dist: " + String(distance));
int lightState = digitalRead(DO_PIN);
  if (lightState == HIGH)
    Serial.println("It is dark");
  else
    Serial.println("It is light");

Serial.println("\-----------");
}
void writeData(){
int lightState = digitalRead(DO_PIN);
int aqi=analogRead(34);
ThingSpeak.setField(1, distance);
ThingSpeak.setField(3, data.humidity);
ThingSpeak.setField(2, data.temperature);
ThingSpeak.setField(4, lightState);
ThingSpeak.setField(5, aqi);
statusCode = ThingSpeak.writeFields(myChannelNumber,myWriteAPIKey);
if(statusCode == 200) //successful writing code
Serial.println("Channel update successful.");
else
Serial.println("Problem Writing data. HTTP error code :" +
String(statusCode));
delay(5000); // data to be uploaded every 15secs
}
long getDistanceInCentimeters() {
digitalWrite(TRIG_PIN,LOW);
delayMicroseconds(2);
digitalWrite(TRIG_PIN, HIGH);
delayMicroseconds(10);
digitalWrite(TRIG_PIN, LOW);
duration = pulseIn(ECHO_PIN, HIGH);
return (duration * 0.034 / 2);
}